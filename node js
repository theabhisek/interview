#########################################################node js questions################################################
cammand for latest version of node js :curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
sudo apt-get install -y nodejs

nvm install 19.1.0

node 19.1.0
npm:8.19.3

domain 
dns
querystring
What is Node.js
Node.js Process Model
key features of Node.js
module:evenemiter,util,stream,querystring,zlib,tty,process,cronJob,cluster,unirest,dns,punycode,crypto,stream,passport,child_process,repl||os,path, http,fs,url,buffer,assert
local and global npm package list 
node js benefit
first call back error in node js
cli
javascript engine
modules
emitter,dispatcher
package.log
package.json
event emitter,event listners
node_env
readfile,create file in node js
test pyramid
reactor pattern
lts
stab
timing feature
event driven programming means
thread pool
worker threads
web application architecture
yield,modularization
inbuilt node js debugger	
api gateway architecture
api gateway
create server using http


@@@@@@@@@@@@@@@@@@@@@@@**start**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#####################********moduls ***************#############
In Node.js Application, a Module can be considered as a block of code that provide a simple or complex functionality that can communicate with external application. Modules can be organized in a single file or a collection of multiple files/folders.
their reusability throughout the application and ability to reduce the complexity of code into smaller piece.
benefits using modules in javascript ecosystem
Maintainability
Reusability
Namespacing
     Express, connect, socket.io and SockeJS, pug, MongoDB and Mongojs, Redis, Lodash, forever, bluebird, moment are some of the npm modules.

	Core Modules:http,assert,fs,path,process,os
	http	creates an HTTP server in Node.js.
	assert	set of assertion functions useful for testing.
	fs	used to handle file system.
	path	includes methods to deal with file paths.
	process	provides information and control about the current Node.js process.
	os	provides information about the operating system.
	querystring	utility used for parsing and formatting URL query strings.
	url	module provides utilities for URL resolution and parsing.

*******************Why is Node.js Single-threaded**************?
Node.js is single-threaded for async processing. By doing async processing on a single-thread under typical web loads, more performance and scalability can be achieved instead of the typical thread-based implementation.
But the I/O is run on separate threads/processes, because the I/O APIs in Node. js is asynchronous/non-blocking by design, in order to accommodate the singlethreaded event loop. Well Node. js is single threaded and asynchronous simply because it a JavaScript runtime.


HANDLE CONCURRENCY:	
				 The multi threaded req and res stateless module  in not followed by node js platform and it adheres to the single threaded event loop model.the node js processing paradigm is heavily infuenced by the javascript event based model and the javascript callback system. As a result nodejs easily manage more concurrent client requests. the event loop is the processing model beating heart in nodejs. 

*************************thraed pool**********************************

A thread pool is a managed collection of threads that are available to perform tasks. Thread pools usually provide: Improved performance when executing large numbers of tasks due to reduced per-task invocation overhead. A means of bounding the resources, including threads, consumed when executing a collection of tasks.
x
In Node. js there are two types of threads: one Event Loop (aka the main loop, main thread, event thread, etc.),
 and a pool of k Workers in a Worker Pool (aka the threadpool). 
 If a thread is taking a long time to execute a callback (Event Loop) or a task (Worker), we call it "blocked".
 
 
Thread pools are often used in server applications to improve performance by creating a thread pool (with a max threshold) that
 can be used to service requests on demand, rather than creating a new thread for each request. 
 For example, a web server takes advantage of thread pool to serve requests.



###########################**first call back error**#########################
Error-first callback in Node. js is a function that returns an error object whenever any successful data is returned by the function. The first argument is reserved for the error object by the function. This error object is returned by the first argument whenever any error occurs during the execution of the function.
The first argument in the function is reserved for the error object. If any error has occurred during the execution of the function, it will be returned by the first argument.
The second argument of the callback function is reserved for any successful data returned by the function. If no error occurred then the error object will be set to null.

************************************repl**###########################
The Node.js Read-Eval-Print-Loop (REPL) is an interactive shell that processes Node.js expressions. The shell reads JavaScript code the user enters, evaluates the result of interpreting the line of code, prints the result to the user, and loops until the user signals to quit.

The REPL is bundled with every Node.js installation and allows you to quickly test and explore JavaScript code within the Node environment without having to store it in a file.
#############################################**cli**#####################
Command-line interfaces (CLIs) built in Node.js allow you to automate repetitive tasks while leveraging the vast Node.js ecosystem. And thanks to package managers like npm and yarn, these can be easily distributed and consumed across multiple platforms.
A command-line interface (CLI) is a text-based user interface (UI) used to run programs, manage computer files and interact with the computer. Command-line interfaces are also called command-line user interfaces, console user interfaces and character user interfaces.


*******************************************************EventEmitter*******************************
Node. js uses events module to create and handle custom events. The EventEmitter class can be used to create and handle custom events module..
// Importing events
const EventEmitter = require('events');
   
// Initializing event emitter instances 
var eventEmitter = new EventEmitter();
  
// Registering to myEvent 
eventEmitter.on('myEvent', (msg) => {
   console.log(msg);
});
  
// Triggering myEvent
eventEmitter.emit('myEvent', "First event");

listener:
An event listener is a procedure in JavaScript that waits for an event to occur. The simple example of an event is a user clicking the mouse or pressing a key on the keyboard.

####************************************************childprocess*******************************
exec() method: This method runs a command in a console and buffers the output.
spawn() method: This method launches a new process with a given command.
fork() method: This method is a special case of spawn() method to create child processes.

########################***event loop**##################
Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.
Event loop- The event loop is something that creates an illusion that javascript is multithreaded , though it is a single threaded synchronous in nature.Event loop checks consistently that if there is something in the callback queue and wether the call stack is yet ready(empty) to recieve another function from callback queue.Event loop is  is responsible to deliver that funtion from callback queue to the call stack in the javascript engine.
########################**Task-Scheduling**###########################
Task Sechedilng allows you to schedule your code to be exicute at schedule time and date .
mostly  3 type of scheduler use in node js for scheduling.
node-cron ,schedule and agenda
mostly i used node-cron 
cron job: these are the task that run periodically by the operating system.
		user can schedule command automatically according to the given time.
		it is usually used for system admin job such  as backup logging sending newsletter
		subscription email and more.
		we will use a package called node -cron  which is a task scheduler in pure javascript 
		for node js . 
		there 
		cron.schedule("* * * * * * ",function(){});
		first star take second is optional;
		second star take minute 
		thread star take hour 
		4th star take day of the month 
		5th star take month 
		6 th star take day of week
Node Schedule
			Node Schedule is a flexible cron-like and not-cron-like job scheduler for Node.js. It allows you to schedule jobs (arbitrary functions) for execution at specific dates, with optional recurrence rules. It only uses a single timer at any given time (rather than reevaluating upcoming jobs every second/
Agenda
		Agenda is a light-weight job scheduling library for Node.js that offers:
		Minimal overhead. Agenda aims to keep its code base small.
		Mongo backed persistence layer.
		Promises based API.
		Scheduling with configurable priority, concurrency, and repeating.
		Scheduling via cron or human readable syntax.
		Event backed job queue that you can hook into.
		const Agenda = require('agenda');
##########################**package.json**##################
The package. json file is the heart of any Node project. It records important metadata about a project which is required before publishing to NPM, and also defines functional attributes of a project that npm uses to install dependencies, run scripts, and identify the entry point to our package.
It contains basic information about the project.
It is mandatory for every project.
It records important metadata about the project.
It contains information such as name, description, author, script, and dependencies.
###################**package.lock*****##########################
it describes the exact tree that was generated to allow subsequent installs to have the identical tree.and it is  automatically generated for those operations where npm modifies either node_modules tree or package.json.and It allows future devs to install the same dependencies in the project and It contains the name, dependencies, and locked version of the project.

################**how to kill all procces in node js ?**################
The process.kill( pid[,signal] ) is an inbuilt technique in node.js that conveys a message to the cycle, pid (which is the interaction id) and sign are in the string design that is the sign to send.
Syntax:
	process.kill(pid[, signal])
Boundaries: This technique acknowledges two boundaries as referenced above and depicted underneath:
pid: This boundary holds the interaction ID.
signal: This boundary holds the string design.
signal names: These are in string design.
The process.kill() strategy will toss a blunder on the off chance that the objective pid isn’t found or doesn’t exist. This technique returns boolean worth 0 assuming that pid exists and can be utilized as a test for the presence of the objective interaction. For window clients, this technique will likewise toss a mistake assuming pid is utilized to kill a gathering of interaction.

Beneath models show the utilization of the process.kill() property in Node.js.

####################**What is Reactor Pattern in Node.js ?**###########33
Reactor Pattern is used to avoid the blocking of the Input/Output operations. It provides us with a handler that is associated with I/O operations. When the I/O requests are to be generated, they get submitted to a demultiplexer, which handles concurrency in avoiding the blocking of the I/O mode and collects the requests in form of an event and queues those events.

There are two ways in which I/O operations are performed:

Blocking I/O: Application will make a function call and pause its execution at a point until the data is received. It is called as ‘Synchronous’.

Non-Blocking I/O: 
				Application will make a function call, and, without waiting for the results it 
continues its execution. It is called as ‘Asynchronous’.

Note: Node.js is Asynchronous in nature.

Reactor Pattern comprises of:


Resources: They are shared by multiple applications for I/O operations, generally slower in executions.
Synchronous Event De-multiplexer/Event Notifier: This uses Event Loop for blocking on all resources. When a set of I/O operations completes, the Event De-multiplexer pushes the new events into the Event Queue.
Event Loop and Event Queue: Event Queue queues up the new events that occurred along with its event-handler, pair.
Request Handler/Application: This is, generally, the application that provides the handler to be executed for registered events on resources.
How Reactor Pattern works?
Everything starts with the application. It makes a request and the event demultiplexer gathers those requests and then it forms queues know as Event Queues.
Event demultiplexer is run by libuv which is a library that allows JavaScript code (via V8) to perform I/O, in-network, file, etc. It is an asynchronous IO library that allows Node.js to perform I/O.
In the diagram above, there is only one event queue and there are 7 basics queues. Those queues have ascending priorities, the queue that has the highest priority is checked first by the event loop.
The Timers queue has the highest priority. setTimeout and setInterval functions are queued here. Once the events are done in this queue, or time is up, the event loop passes those functions to call stack, named as executing handler.
When one of the event queues is complete, instead of jumping to the next queue, the event loop firstly will check the other two queues which queue other micro tasks and process called nextTick functions. Then it will jump to the upcoming queue.
Callback queue is an event queue and call stack is execute handler.

#########******How the single threaded non blocking IO model works in NodeJS ?**###########
Node.js is a JavaScript runtime environment that runs on the Chrome V8 engine and is used for server-side scripting. It takes requests from users, processes those requests, and returns responses to the corresponding users. 	
It is based on single-threaded architecture: Since node.js gets multiple requests from multiple users it executes one command at a time. Due to this it can handle concurrent client requests very effectively and has good performance. q

###########**Zlib**********###########
the zlib  module is provides compress and decompress zip and unzip  functionalites it is 
implemented gzip and deflate /inflate.

method const zlip= require("zlip");

compress and decompress a file can be done by piping the scure stream data 
into a destination stream throough zlip stream.


for exmaple we have a input.txt so with the help of zlip moduleto compress into input.txt.gz
const zlib = require("zlib");
const fs = require("fs");

const zip = zlip.createGzip();

const input = fs.createReadStream('inpute.txt');
const output = fs.createWriteStream("inpute.txt.gz");

input.pipe(zip).pipe(output);//it's imp method ist heart of zlib

for exmaple we have a input.txt.gz so with the help of zlip moduleto compress into input.txt

const zlib = require("zlib");
const fs = require("fs");

const unzip = zlip.createUnzip();

const input = fs.createReadStream('inpute.txt.gz');
const output = fs.createWriteStream("inpute.txt");

input.pipe(unzip).pipe(output);//it's imp method ist heart of zlib


################***event-driven**######################
so an event driven programming approach uses event to trigger
various funnctions. an event can be anything such as a typing key and clicking or mouse button .
A  callback fuction already registered with the element executes whenever an event is triggered.

###############***control Flow****###################
the control flow function is a piece of code that runs in between several asynchronous function.

####################**Assert**###############
The assert module provide way of testing expressions.if the expression
evaluates to 0 or false an assertion failuar is being caused and the program is terminated .
there are some methhod of assert
assert() this is check if a value is true 
ok()this is check if a value is true 
equal(),notEqual(),strictEqual(), notStrictEqual() there are check type an give error
deepEqual(),notDeepEqual(),strictDeepEqual(),notStrcitDeepEqual()
ifError(),fail(),throws(),doesNotthrow
************************************Buffer*************************************
js is used to perform operations on raw binary data. Generally, Buffer refers to the particular memory location in memory. 
Buffer and array have some similarities, but the difference is array can be any type, and it can be resizable. 
Buffers only deal with binary data, and it can not be resizable


