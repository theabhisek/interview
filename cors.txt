const express = require("express");
const app=express()
 

const express = require('express');
const app = express();

    const ingredients = [
    {
        "id": "1",
        "item": "Bread"
    },
    {
        "id": "2",
        "item": "Eggs"
    },
    {
        "id": "3",
        "item": "Milk"
    },
    {
        "id": "4",
        "item": "Butter"
    }
];

app.get('/ingredients', (req, res) =>{
    res.send(ingredients);
});
app.listen(6069)

fetch("http://localhost:6069/ingredients").then(req => req.text()).then(console.log)

To solve this error, we need to add the CORS header to the server and
 give https://www.section.io access to the server respon
const cors = require('cors');
app.use(cors({
    origin: 'https://www.section.io'
}));

This means that you only have access to our server’s resources. 
You can have an array of these multiple origins, as shown below.

const cors = require('cors');
app.use(cors({
    origin: ['https://www.section.io', 'https://www.google.com/']
}))

Conclusion:
When you deploy an application on the server, 
you should not accept requests from every domain.
 Instead, you should specify which origin can make requests to your server.

This way, you are able to block users 

who attempt to clone your site or make requests from an unauthorized servers. 
This is important an security measure. Check this CORS NPM registry 
and learn more on where to use CORS in your Express application.





**cors**
**What is CORS?**
CORS stands for Cross-Origin Resource Sharing. 
It allows us to relax the security applied to an API.
 This is done by bypassing the Access-Control-Allow-Origin headers, 
which specify which origins can access the API.
In other words, CORS is a browser security feature that restricts cross-origin 
HTTP requests with other servers and specifies which domains access your resources.

How CORS works?
An API is a set procedure for two programs to communicate. 
This means that API resources are consumed by other clients and servers.
The client and the server have the same origin. 
In this example, accessing resources will be successful.
You’re trying to access resources on your server, and the same server handles the request.
The client and server have a different origin from each other, i.e., accessing resources from a different server. 
In this case, trying to make a request to a resource on the other server will fail.

This is a security concern for the browser. CORS comes into play to disable
 this mechanism and allow access to these resources. 
 It will add a response header access-control-allow-origins and specify
which origins are permitted. CORS ensures that we are sending the right heade